#!/usr/bin/env python3

import signal
from argparse import ArgumentParser
from datetime import datetime
import json
import os
import subprocess
import sys

class BitwardenSecret:
    object: str
    id: str
    organization_id: str
    project_id: str
    key: str
    value: str
    note: str
    creation_date: datetime
    revision_date: datetime

    def __init__(
            self,
            object: str,
            id: str,
            organizationId: str,
            projectId: str,
            key: str,
            value: str,
            note: str,
            creationDate: datetime,
            revisionDate: datetime) -> None:
        self.object = object
        self.id = id
        self.organization_id = organizationId
        self.project_id = projectId
        self.key = key
        self.value = value
        self.note = note
        self.creation_date = creationDate
        self.revision_date = revisionDate

cli = ArgumentParser(
    description='Converts Bitwarden secrets into environment variables for your shell.')
cli.add_argument(
    '--shell',
    type=str,
    help='Your shell: (bash|fish|zsh)',
    default=os.environ['SHELL'].split('/')[-1])
subparsers = cli.add_subparsers(dest="subcommand")

# from: https://mike.depalatis.net/blog/simplifying-argparse.html
def subcommand(args=[], parent=subparsers):
    def decorator(func):
        parser = parent.add_parser(func.__name__, description=func.__doc__)
        for arg in args:
            parser.add_argument(*arg[0], **arg[1])
        parser.set_defaults(func=func)
    return decorator

def argument(*name_or_flags, **kwargs):
    """
    Convenience function to properly format arguments to pass to the
    subcommand decorator.
    """
    return ([*name_or_flags], kwargs)

@subcommand()
def get(args=None):
    """
    Get the environment variables for your shell.
    """
    json_secrets = subprocess.run(
        ['bws', 'list', 'secrets', '-t', os.environ['BWS_ACCESS_TOKEN']],
        capture_output=True,
        text=True).stdout

    try:
        secrets = json.loads(json_secrets)
    except json.decoder.JSONDecodeError:
        print("Error: Could not parse JSON secrets. Please check that your secrets file is valid JSON.")
        sys.exit(1)

    secrets = [BitwardenSecret(**secret) for secret in secrets]

    filtered_secrets = []
    for secret in secrets:
        if not any(secret.key.endswith(ext)
                   for ext in ('.sh', '.env', '.enc', '.fish')):
            filtered_secrets.append(secret)

    if args.shell == 'bash' or args.shell == 'zsh':
        print(f"#!/usr/bin/env {args.shell}")
        for secret in filtered_secrets:
            print(f"export {secret.key}='{secret.value}'")
    elif args.shell == 'fish':
        print("#!/usr/bin/env fish")
        for secret in filtered_secrets:
            print(f"set -gx {secret.key} '{secret.value}'")
    else:
        print(f"Shell {args.shell} not supported")
        sys.exit(1)

    return filtered_secrets


@subcommand([argument('command', nargs='+')])
def run(*args):
    """
    Inject the environment variables for your shell into your current shell.
    """
    secrets = get()

    shell_env_vars = []
    if args.shell == 'bash' or args.shell == 'zsh':
        for secret in secrets:
            shell_env_vars.append(f"export {secret.key}='{secret.value}'")
    elif args.shell == 'fish':
        for secret in secrets:
            shell_env_vars.append(f"set -gx {secret.key} '{secret.value}'")
    else:
        print(f"Shell {args.shell} not supported")
        sys.exit(1)

    command = ' '.join(args.command)
    

    os.environ.update({secret.key: secret.value for secret in secrets})
    

def handle_sigpipe(signum, frame):
    sys.stdout.flush()
    sys.exit(1)


signal.signal(signal.SIGPIPE, handle_sigpipe)

if __name__ == '__main__':
    if subprocess.run(['which', 'bws'], capture_output=True).returncode != 0:
        print("Error: bws is not installed. Please install bws before using this script.")
        sys.exit(1)
    args = cli.parse_args()
    args.func(args)
